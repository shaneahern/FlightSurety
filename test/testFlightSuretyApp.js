const truffleAssert = require('truffle-assertions');

const assert = require("assert");

// Declare a variable and assign the compiled smart contract artifact
const FlightSuretyApp = artifacts.require("FlightSuretyApp");
const FlightSuretyData = artifacts.require("FlightSuretyData");


contract('FlightSuretyApp', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    const contractOwnerAddress = accounts[0];
    const firstAirlineAddress = accounts[1];
    const secondAirlineAddress = accounts[2];
    const thirdAirlineAddress = accounts[3];
    const fourthAirlineAddress = accounts[4];
    const fifthAirlineAddress = accounts[5];
    const passengerAddress1 = accounts[6];
    const passengerAddress2 = accounts[7];

    let flightSuretyData;
    let flightSuretyApp;
    let firstAirline;
    let secondAirline;
    

    // 1st Test
    it("Deploys successfully and adds airlines", async() => {

        flightSuretyData = await FlightSuretyData.deployed(firstAirlineAddress, {from: contractOwnerAddress});
        flightSuretyApp = await FlightSuretyApp.deployed(flightSuretyData.address, {from: contractOwnerAddress});

        const dataContractAddress = await flightSuretyApp.getDataContractAddress();

        assert.strictEqual(dataContractAddress, flightSuretyData.address, "Data contact address not set");        
    });
    
    it("Sets operating status to true", async() => {
        assert(await flightSuretyApp.isOperational() === false, "Should start as isOperational = false");
        await flightSuretyApp.setOperatingStatus(true, contractOwnerAddress);
        assert(await flightSuretyApp.isOperational() === true, "isOperational should be true after set");
    });

    it("Registers airlines, enforces consensus rules", async() => {
        firstAirline = await flightSuretyData.getAirline(firstAirlineAddress);   
        assert.strictEqual(firstAirline.airlineAddress, firstAirlineAddress, "First airline not registered");

        let approvingAirlines = [];
        try {
            await flightSuretyData.registerAirline(approvingAirlines, secondAirlineAddress);
        }  catch(error) {
            assert.strictEqual(error.reason, 'Minimum consesus not met', "Expecting minimum consesus error");
        }
        approvingAirlines = [secondAirlineAddress];
        try {
            await flightSuretyData.registerAirline(approvingAirlines, secondAirlineAddress);
        }  catch(error) {
            assert.strictEqual(error.reason, 'Airline not registered', "Approving airline not registered");
        }
        approvingAirlines = [firstAirlineAddress];
        await flightSuretyData.registerAirline(approvingAirlines, secondAirlineAddress);
        secondAirline = await flightSuretyData.getAirline(secondAirlineAddress);   
        assert.strictEqual(secondAirline.airlineAddress, secondAirlineAddress, "Second airline not registered");

        approvingAirlines = [secondAirlineAddress]
        await flightSuretyData.registerAirline(approvingAirlines, thirdAirlineAddress);
        const thirdAirline = await flightSuretyData.getAirline(thirdAirlineAddress);   
        assert.strictEqual(thirdAirline.airlineAddress, thirdAirlineAddress, "Third airline not registered");

        approvingAirlines = [thirdAirlineAddress]
        await flightSuretyData.registerAirline(approvingAirlines, fourthAirlineAddress);
        const fourthAirline = await flightSuretyData.getAirline(fourthAirlineAddress);   
        assert.strictEqual(fourthAirline.airlineAddress, fourthAirlineAddress, "Fourth airline not registered");

        // Now have 4 airlines, now require 50% of exisiting airlines to approve

        // Only 1 of 5 airlines approving (20%), should fail
        approvingAirlines = [fourthAirlineAddress];
        try {
            await flightSuretyData.registerAirline(approvingAirlines, fifthAirlineAddress);
        }  catch(error) {
            assert.strictEqual(error.reason, 'Minimum consesus not met', "Expecting minimum consesus error");
        }

        // 2 of 4 (50%) approving, should succeed
        approvingAirlines = [thirdAirlineAddress, fourthAirlineAddress];
        await flightSuretyData.registerAirline(approvingAirlines, fifthAirlineAddress);
        const fifthAirline = await flightSuretyData.getAirline(fifthAirlineAddress);   
        assert.strictEqual(fifthAirline.airlineAddress, fifthAirlineAddress, "Fifth airline not registered");

    });


    it("Only funded airlines are valid", async() => {

        try {
            await flightSuretyData.getValidAirline(firstAirlineAddress);   
        }  catch(error) {
            assert(JSON.stringify(error.data).includes("Airline not at minimum funding"), error);
        }

        assert(firstAirline.funding === web3.utils.toWei("0", "ether"), "Airline funding should be 0 ETH");
        await flightSuretyData.fund(firstAirline.airlineAddress, {from: firstAirline.airlineAddress, value: web3.utils.toWei("10", "ether")});
        const fundedFirstAirline = await flightSuretyData.getAirline(firstAirline.airlineAddress);   
        assert.strictEqual(fundedFirstAirline.funding, web3.utils.toWei("10", "ether"), "Airline funding not set to 10 eth");
        const fundedValidFirstAirline = await flightSuretyData.getValidAirline(firstAirline.airlineAddress); 
        assert.strictEqual(fundedValidFirstAirline.airlineAddress, firstAirline.airlineAddress, "First airline not valid");  


    });


    it("Adds flights to funded airline", async() => {
        
        const ts = Date.now();
        await flightSuretyApp.registerFlight(firstAirline.airlineAddress, "101", ts)
        await flightSuretyApp.registerFlight(firstAirline.airlineAddress, "102", ts)
        await flightSuretyApp.registerFlight(firstAirline.airlineAddress, "103", ts)
    });


    it("Adds flights to unfunded airline", async() => {
        const ts = Date.now();
        try {
            await flightSuretyApp.registerFlight(secondAirline.airlineAddress, "201", ts)
         }  catch(error) {
            assert(JSON.stringify(error.data).includes("Airline not at minimum funding"), error);
        }
    });


    it("Fund unfunded airline and add flights", async() => {
        const ts = Date.now();
        let airline2 = await flightSuretyData.getAirline(secondAirline.airlineAddress);
        assert(airline2.funding === web3.utils.toWei("0", "ether"))
        await flightSuretyData.fund(secondAirline.airlineAddress, {from: secondAirline.airlineAddress, value: web3.utils.toWei("10", "ether")});
        airline2 = await flightSuretyData.getAirline(secondAirline.airlineAddress);
        assert(airline2.funding === web3.utils.toWei("10", "ether"))
        await flightSuretyApp.registerFlight(secondAirline.airlineAddress, "201", ts)
        await flightSuretyApp.registerFlight(secondAirline.airlineAddress, "202", ts)
        await flightSuretyApp.registerFlight(secondAirline.airlineAddress, "203", ts)
        const flight201 = await flightSuretyData.getFlight("201");
        const flight202 = await flightSuretyData.getFlight("202");
        const flight203 = await flightSuretyData.getFlight("203");
        assert(flight201.flightId === "201");
        assert(flight202.flightId === "202");
        assert(flight203.flightId === "203");

    });

    it("Passenger may purchase insurance", async() => {
        await flightSuretyApp.buyInsurance(passengerAddress1, "101", {from: passengerAddress1, value: web3.utils.toWei("1", "ether")});
        await flightSuretyApp.buyInsurance(passengerAddress2, "101", {from: passengerAddress2, value: web3.utils.toWei("0.5", "ether")});
        await flightSuretyApp.buyInsurance(passengerAddress1, "201", {from: passengerAddress1, value: web3.utils.toWei("1", "ether")});
        await flightSuretyApp.buyInsurance(passengerAddress2, "201", {from: passengerAddress2, value: web3.utils.toWei("0.5", "ether")});
        const flight1 = await flightSuretyData.getFlight("101");
        const flight2 = await flightSuretyData.getFlight("201");
        assert(flight1.flightId === "101");
        assert(flight1.passengers[0].passenger === passengerAddress1);
        assert(flight1.passengers[0].insuranceValue === web3.utils.toWei("1", "ether"), flight1.passengers[0].insuranceValue);
        assert(flight1.passengers[1].passenger === passengerAddress2);
        assert(flight1.passengers[1].insuranceValue === web3.utils.toWei("0.5", "ether"), flight1.passengers[0].insuranceValue);
        assert(flight2.flightId === "201");
        assert(flight2.passengers[0].passenger === passengerAddress1);
        assert(flight2.passengers[0].insuranceValue === web3.utils.toWei("1", "ether"));
        assert(flight2.passengers[1].passenger === passengerAddress2);
        assert(flight2.passengers[1].insuranceValue === web3.utils.toWei("0.5", "ether"));
    });

    it("Passenger may purchase max 1 ether insurance, over amount refunded", async() => {
        // const beforeBal = await web3.eth.getBalance(passengerAddress1);
        let tx = await flightSuretyApp.buyInsurance(passengerAddress1, "202", {from: passengerAddress1, value: web3.utils.toWei("1.5", "ether")}).then(
            (res) => {
                console.log(res);
                web3.eth.getTransaction(res.tx).then(console.log);
            }
        );
        // truffleAssert.eventEmitted(tx, 'Refund', (ev) => {
        //     return ev.passenger === passengerAddress1 && ev.refund === web3.utils.toWei("0.5", "ether");
        // });
        // const afterBal = await web3.eth.getBalance(passengerAddress1);
        const flight3 = await flightSuretyData.getFlight("202");
        assert(flight3.passengers[0].passenger === passengerAddress1);
        assert(flight3.passengers[0].insuranceValue === web3.utils.toWei("1", "ether"));
    });


    it("Credit insureess for flight", async() => {
        await flightSuretyData.creditInsurees("101");
        const flight1 = await flightSuretyData.getFlight("101");
        assert(flight1.passengers[0].payoutCredit === web3.utils.toWei("1.5", "ether"));
        assert(flight1.passengers[1].payoutCredit === web3.utils.toWei("0.75", "ether"));

        await flightSuretyData.creditInsurees("201");
        const flight2 = await flightSuretyData.getFlight("201");
        assert(flight2.passengers[0].payoutCredit === web3.utils.toWei("1.5", "ether"));
        assert(flight2.passengers[1].payoutCredit === web3.utils.toWei("0.75", "ether"));

        await flightSuretyData.creditInsurees("202");
        const flight3 = await flightSuretyData.getFlight("201");
        assert(flight3.passengers[0].payoutCredit === web3.utils.toWei("1.5", "ether"));
    });

});

